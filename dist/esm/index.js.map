{"mappings":"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","sources":["src/index.ts","src/eventEmitter.ts","src/defaultMap.ts","src/deepCopy.ts","src/isCloneable.ts","src/eventContext.ts"],"sourcesContent":["export { EventEmitter } from './eventEmitter';\nexport { EventContext} from './eventContext';","\nimport { DefaultMap } from './defaultMap';\nimport { EventContext } from './eventContext';\n\nexport class EventEmitter<T extends {\n    [x: string]: (...args: any[]) => void\n}>\n{\n    #eventMap = new DefaultMap<keyof T, EventContext<T[keyof T]>>(new EventContext());\n\n    once = (key: keyof T, value: T[keyof T]) => {\n        const eventContext = this.#eventMap.get(key);\n        const { eventArray } = eventContext;\n        const length = eventArray.length;\n\n        eventArray.push(((...args) => {\n            eventArray[length] = null;\n            eventContext.filter = true;\n            value?.(...args);\n        }) as T[keyof T]);\n    };\n\n    emit = (key: keyof T, ...args: Parameters<T[keyof T]>) => {\n        const eventContext = this.#eventMap.get(key);\n\n        eventContext.execute(...args);\n    };\n\n    on = (key: keyof T, value?: T[keyof T]) => {\n        const eventContext = this.#eventMap.get(key);\n        const { eventArray } = eventContext;\n\n        eventContext.off = false;\n\n        if (value !== undefined) {\n            eventArray.push(value);\n        }\n    };\n\n    off = (key: keyof T) => {\n        const eventContext = this.#eventMap.get(key);\n\n        eventContext.off = true;\n    };\n\n    delete = (key: keyof T) => {\n        this.#eventMap.delete(key);\n    };\n}","import { deepCopy } from './deepCopy';\nimport { Cloneable } from './cloneable';\n\nexport class DefaultMap<Key, Value extends (Cloneable | object | number | string)>\n{\n    #map = new Map<Key, Value>();\n    #defalutValue: Value;\n\n    get defaultValue() {\n        return deepCopy(this.#defalutValue);\n    }\n\n    constructor(defaultValue: Value) {\n        this.#defalutValue = defaultValue;\n    }\n\n    set(key: Key, value: Value) {\n        this.#map.set(key, value);\n    }\n\n    get(key: Key) {\n        const value = this.#map.get(key);\n\n        if (value === undefined) {\n            this.#map.set(key, this.defaultValue as any);\n\n            return this.#map.get(key)!;\n        }\n\n        return value;\n    }\n\n    delete(key: Key) {\n        this.#map.delete(key);\n    }\n}","import { isCloneable } from './isCloneable';\n\nexport const deepCopy = (obj: any) => {\n    if (isCloneable(obj)) {\n        return obj.clone();\n    }\n    else if (typeof obj === 'string' || typeof obj === 'function') {\n        return obj as any;\n    }\n    else if ((obj).length !== undefined) {\n        return Array.from(obj as any);\n    }\n    else if (typeof obj === 'object' && obj !== null) {\n        const clone = Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);\n\n        for (const key in obj) {\n            if (typeof clone[key] !== 'function') {\n                clone[key] = deepCopy(obj[key]);\n            }\n        }\n\n        return clone;\n    }\n\n    return obj;\n};","import { Cloneable } from './cloneable';\n\nexport const isCloneable = (obj: any): obj is Cloneable => {\n    if (obj.clone) {\n        return true;\n    }\n\n    return false;\n};","import { Cloneable } from './cloneable';\n\nexport class EventContext<T extends (...args: any[]) => any> implements Cloneable {\n    eventArray: (T | null)[] = [];\n    filter = false;\n    off = false;\n\n    #filterEventArrayIfFilterIsTrue = () => {\n        if (this.filter) {\n            const filteredEventArray = this.eventArray.filter(Boolean);\n\n            this.eventArray.splice(0, this.eventArray.length);\n            this.eventArray.push(...filteredEventArray);\n        }\n    };\n\n    execute = (...args: Parameters<T>): (ReturnType<T> | undefined) => {\n        this.#filterEventArrayIfFilterIsTrue();\n        if (this.off) {\n            return undefined;\n        }\n\n        this.eventArray.forEach((event) => {\n            (event as T)(...args);\n        });\n    };\n\n    clone(): Cloneable {\n        return new EventContext();\n    }\n}"],"names":[],"version":3,"file":"index.js.map"}